<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>YouTube Tags Extractor — MultiImageX</title>
<meta name="description" content="Advanced YouTube Tags Extractor by MultiImageX. Paste a YouTube URL or ID to extract title, description, tags and suggested keywords. Includes SEO tips and download/export features.">
<meta name="keywords" content="youtube tags extractor, extract youtube tags, youtube seo, multiimagex, multiimagex.online, video tags extractor">
<link rel="canonical" href="https://www.multiimagex.online/tools/yt-tags-extractor/" />
<meta property="og:title" content="YouTube Tags Extractor — MultiImageX" />
<meta property="og:description" content="Extract YouTube video tags, title and description. Optimize your video SEO with suggested keywords and export CSV." />
<meta property="og:url" content="https://www.multiimagex.online/tools/yt-tags-extractor/" />
<meta property="og:type" content="website" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebApplication","name":"YouTube Tags Extractor","url":"https://www.multiimagex.online/tools/yt-tags-extractor/","description":"Extract tags, title and description from YouTube videos and generate SEO suggestions.","keywords":["youtube tags","tag extractor","multiimagex"]}
</script>
<style>
  :root{--brand:#2563eb;--muted:#6b7280}
  body{font-family:Inter,system-ui,Arial,sans-serif;background:#f7fafc;margin:0;color:#0b1220}
  header{background:linear-gradient(90deg,var(--brand),#7c5cff);color:#fff;padding:18px;text-align:center}
  main{max-width:980px;margin:18px auto;padding:18px}
  input,button,textarea{padding:10px;border-radius:8px;border:1px solid #e6eef8;width:100%}
  .row{display:flex;gap:8px}
  .card{background:#fff;padding:14px;border-radius:10px;box-shadow:0 6px 20px rgba(12,18,30,0.06)}
  pre{background:#f8fafc;padding:12px;border-radius:8px}
  .small{font-size:13px;color:var(--muted)}
</style>
</head>
<body>
<header><h1>YouTube Tags Extractor — MultiImageX</h1><div style="opacity:.9;margin-top:6px">Extract video tags, title, description and get SEO keyword suggestions. Export results as CSV.</div></header>
<main>
  <div class="card">
    <label for="url">YouTube URL or Video ID</label>
    <input id="url" placeholder="https://www.youtube.com/watch?v=VIDEO_ID or VIDEO_ID" />
    <div style="display:flex;gap:8px;margin-top:8px">
      <input id="apiKey" placeholder="(Optional) YouTube Data API Key - for reliable results" />
      <button id="fetch">Fetch</button>
    </div>
    <div style="margin-top:12px" id="resultArea">
      <p class="small">Results will appear here.</p>
    </div>
    <div style="margin-top:12px" class="small">Tip: For production keep the API key on server and call via proxy to avoid exposing the key publicly.</div>
  </div>
</main>
<script>
function getVideoId(input){ if(!input) return null; const v=input.trim(); if(/^[a-zA-Z0-9_-]{11}$/.test(v)) return v; try{ const u=new URL(v); if(u.hostname.includes('youtu.be')) return u.pathname.slice(1); if(u.searchParams.get('v')) return u.searchParams.get('v'); }catch(e){} const m=v.match(/[?&]v=([a-zA-Z0-9_-]{11})|youtu\.be\/([a-zA-Z0-9_-]{11})/); return m? (m[1]||m[2]) : null; }

async function fetchWithAPI(vid,key){ const url=`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${vid}&key=${encodeURIComponent(key)}`; const r=await fetch(url); if(!r.ok) throw new Error('API '+r.status); return r.json(); }

async function fetchNoAPI(vid){ // fallback: try fetch video page & parse og:tags meta (may be blocked by CORS). We'll attempt JSON data extraction via noembed as smaller fallback.
  // Use noembed for title/thumbnail/author (no tags). For tags require API or server-side.
  const noembed = 'https://noembed.com/embed?url=' + encodeURIComponent('https://www.youtube.com/watch?v='+vid);
  const r = await fetch(noembed); if(!r.ok) throw new Error('noembed failed'); return r.json(); }

function renderResult(data, extra){ const container=document.getElementById('resultArea'); container.innerHTML='';
  if(data.title){ const h=document.createElement('h2'); h.textContent=data.title; container.appendChild(h); }
  if(data.description){ const p=document.createElement('pre'); p.textContent=data.description; container.appendChild(p); }
  if(data.tags && data.tags.length){ const ul=document.createElement('ul'); data.tags.forEach(t=>{ const li=document.createElement('li'); li.textContent=t; ul.appendChild(li); }); container.appendChild(ul); }
  if(extra && extra.suggested && extra.suggested.length){ const s=document.createElement('div'); s.innerHTML='<h3>Suggested Keywords</h3>'; const list=document.createElement('div'); list.textContent = extra.suggested.join(', '); s.appendChild(list); container.appendChild(s); }
  // export CSV
  const btn = document.createElement('button'); btn.textContent='Export CSV'; btn.addEventListener('click', ()=>{ const rows=[ ['title', data.title||''], ['description', (data.description||'').replace(/\n/g,' ')], ['tags', (data.tags||[]).join(', ')] ]; const csv = rows.map(r=> r.map(c=> '"'+(String(c).replace(/"/g,'""'))+'"').join(',')).join('\n'); const blob=new Blob([csv],{type:'text/csv'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='yt-tags-'+Date.now()+'.csv'; a.click(); URL.revokeObjectURL(url); });
  container.appendChild(btn);
}

function suggestKeywords(title){ if(!title) return []; // basic heuristics: split words, add variations
  const words = title.split(/\s+/).filter(w=>w.length>3).slice(0,8);
  const base = words.map(w=> w.replace(/[^a-zA-Z0-9]/g,'').toLowerCase());
  const suggestions = new Set(); base.forEach(b=>{ suggestions.add(b); suggestions.add(b+' tutorial'); suggestions.add('how to '+b); suggestions.add(b+' tips'); });
  return Array.from(suggestions).slice(0,12);
}

document.getElementById('fetch').addEventListener('click', async ()=>{
  const inp = document.getElementById('url').value.trim(); const key = document.getElementById('apiKey').value.trim(); const vid = getVideoId(inp);
  const resArea = document.getElementById('resultArea'); resArea.innerHTML='Loading...';
  if(!vid){ resArea.innerHTML = '<div style="color:#b91c1c">Invalid URL or ID.</div>'; return; }
  try{
    if(key){ const j = await fetchWithAPI(vid,key); if(j.items && j.items.length){ const snip=j.items[0].snippet; const data={title:snip.title,description:snip.description,tags:snip.tags||[]}; const extra={suggested: suggestKeywords(snip.title)}; renderResult(data,extra); return; } }
    // fallback
    const no = await fetchNoAPI(vid); const data = { title: no.title || '', description: no.html || '' , tags: [] }; renderResult(data,{suggested: suggestKeywords(data.title)});
  }catch(err){ resArea.innerHTML = '<div style="color:#b91c1c">Error fetching metadata. For reliable tags use YouTube Data API key via server proxy.</div>'; console.error(err); }
});
</script>
</body>
</html>
